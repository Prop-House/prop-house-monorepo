type Summary {
  "A constant (SUMMARY)"
  id: String!

  "The total number of rounds across all houses"
  roundCount: Int!

  "The total number of proposals across all rounds"
  proposalCount: Int!

  "The total number of vote submissions across all rounds"
  voteSubmissionCount: Int!
}

type Round {
  "The Starknet round address"
  id: String!

  "The round address on the source chain"
  sourceChainRound: String!

  "The round type (TIMED_FUNDING)"
  type: String!

  "The round state"
  state: String!

  "The total number of proposals in the round"
  proposalCount: Int!

  "The total number of votes in the round"
  voteCount: Int!

  "The unix timestamp when the round was registered"
  registeredAt: Int!

  "The transaction in which the round was registered"
  tx: String

  "All proposals that have been submitted to the round"
  proposals: [Proposal]! @derivedFrom(field: "round")

  "All votes that have been cast in the round"
  votes: [Vote]! @derivedFrom(field: "round")
}

type Proposal {
  "A concatenation of the Starknet round address and proposal ID"
  id: String!

  "The proposal ID"
  proposalId: Int!

  "The round that the proposal was submitted to"
  round: Round!

  "The proposer account"
  proposer: Account!

  "The proposal metadata URI"
  metadataUri: String!

  "The proposal title"
  title: String!

  "The proposal body"
  body: String!

  "Whether the proposal has been cancelled"
  isCancelled: Boolean!

  "Whether the proposal has been selected as a winner"
  isWinner: Boolean!

  "The unix timestamp when the proposal was received"
  receivedAt: Int!

  "The transaction in which the proposal was submitted"
  tx: String

  "The number of votes that the proposal has received"
  voteCount: Int!

  "All votes that the proposal has received"
  votes: [Vote]! @derivedFrom(field: "proposal")
}

type Vote {
  "A concatenation of the vote transaction hash and log index"
  id: String!

  "The voter account"
  voter: Account!

  "The round that the vote is in"
  round: Round!

  "The proposal that was voted for"
  proposal: Proposal!

  "The amount of voting power"
  votingPower: Int!

  "The unix timestamp when the vote was received"
  receivedAt: Int!

  "The transaction in which the votes were submitted"
  tx: String
}

type Account {
  "The account address"
  id: String!

  "The number of proposals created by the account"
  proposalCount: Int!

  "The number of votes submitted by the account"
  voteCount: Int!

  "The unix timestamp at which the account first interacted with prop house"
  firstSeenAt: Int!

  "All proposals submitted by the account"
  proposals: [Proposal]! @derivedFrom(field: "proposer")

  "All votes submitted by the account"
  votes: [Vote]! @derivedFrom(field: "voter")
}
